@startuml
'https://plantuml.com/sequence-diagram
box "(community)" #LightYellow
actor Alice_novice as alice
end box

box "(offchain)" #Coral
actor Forum as forum
end box

box "(community)" #LightGray
actor Communities_novice as community
actor Guarantors_expert as guarantor
end box

box "(multisig)" #Peru
actor BitDAOAdmins_expert as bitdaoadmin
end box

box "(token)" #OliveDrab
actor TokenHolders_novice as tokenholders
endbox

box "(offchain)" #Coral
database Snapshot as snapshot
end box

box "(onchain)" #Lavender
collections BondContract as bondcontract
'collections RewardContract as rewardcontract
'collections InsuranceContract as insurancecontract
collections GrantsTreasury as grantstreasury
collections BitDAOTreasury as bitdaotreasury
collections BitDAOGovernanceV2 as bitdaogovernance
collections LDAO
end box

autonumber "Current:[00]"

== Current ==

alice -> forum: create forum proposal

community -> forum: show proposals
community <-- forum: proposals
community -> forum: put positive/negative feedback

alice <-- forum: get positive/negative feedback

community -> community: delegate votes

alice -> snapshot: if (positive) submit proposal

tokenholders -> snapshot: show proposals
tokenholders <-- snapshot: proposals
tokenholders -> snapshot: vote on open proposals
tokenholders <- snapshot: vote
bitdaoadmin -> bitdaotreasury: if (pass) allow funds
bitdaotreasury -> grantstreasury: transfer funds

alt#Gold #DarkSeaGreen trace
  alice <-- grantstreasury: TxHash
end

alice <-- grantstreasury: execute proposal

newpage

autonumber "Bond:[00]"

== Bond ==

alice -> forum: create forum proposal
alice <- guarantor: positive/negative feedback
alice -> bondcontract: if (positive) create bond (specify reward mechanism)

guarantor -> bondcontract: contribute BIT tokens
bondcontract <-- guarantor: ERC20 Fungible bond tokens (1:1 swap)

community -> community: delegate votes

alice -> snapshot: if (positive) submit proposal

tokenholders -> snapshot: show proposals
tokenholders <-- snapshot: proposals
tokenholders -> snapshot: vote on open proposals
tokenholders <- snapshot: vote

bitdaoadmin -> bitdaotreasury: if (pass) allow funds
bitdaotreasury -> grantstreasury: transfer funds

'bondcontract -> rewardcontract: deploy bonded funds to earn rewards
'bondcontract <-- rewardcontract: issue rewards during lockup

'bondcontract -> insurancecontract: deploy insurance on bonded funds
'bondcontract <-- insurancecontract: provide receipt of insurance terms

alice <-- grantstreasury: execute proposal

community -> community: delegate votes

alice -> snapshot: submit release request
guarantor -> snapshot: show proposals
guarantor <-- snapshot: proposals
guarantor -> snapshot: vote to release or proportional slash

bitdaoadmin -> snapshot: show vote result
bitdaoadmin <-- snapshot: pass/fail

alt#Gold #LightBlue pass
    bitdaoadmin -> bondcontract: release bond

    guarantor -> bondcontract: submit and redeem bond tokens
    bondcontract <-- guarantor: transfer BIT tokens
    bondcontract <-- guarantor: transfer Reward tokens
else #Pink fail
    bitdaoadmin -> bondcontract: slash bond
    bondcontract -> bitdaotreasury: transfer slashed BIT tokens
    guarantor -> bondcontract: submit and redeem bond tokens (relative to unslashed portion)
    bondcontract <-- guarantor: transfer BIT tokens
end

  alt#Gold #DarkSeaGreen trace
    bitdaoadmin <-- bondcontract: TxHash
  end

newpage

autonumber "Roles:[00]"

== Roles ==

alice -> forum: submit create role proposal
community -> forum: list role proposals
community <-- forum: role proposals
community -> forum: positive/negative feedback
alice <-- forum: get positive/negative feedback

community -> community: delegate votes

alice -> snapshot: if (positive) create admin role

bitdaoadmin -> snapshot: list role proposals
bitdaoadmin <-- snapshot: role proposals
bitdaoadmin -> snapshot: show results
bitdaoadmin <-- snapshot: results

bitdaoadmin -> bitdaogovernance: if (pass) create role

alt#Gold #DarkSeaGreen trace
  bitdaoadmin <-- bitdaogovernance: TxHash
end




@enduml